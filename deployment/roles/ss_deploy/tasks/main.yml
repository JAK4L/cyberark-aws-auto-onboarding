---
# tasks file for cf_deploy

- name: Get Timestamp and Store it in a variable
  set_fact: "timestamp={{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}"
  
- name: Set String for CloudFormation Stack ID
  set_fact:
    stack_set_id: "{{ SSStackName }}"
  
- name: Create workspace directory on temp folder
  file:
    path: "/tmp/{{ stack_set_id }}-{{ timestamp }}"
    state: directory
  register: workspace
  
- set_fact:
    tmp_path: "{{ workspace.path }}"

- name: Get StackSet Template from local file
  copy:
    src: "{{ cf_template_file }}"
    dest: "{{ tmp_path }}/ss.json"

- name: Manipulate StackSet
  shell: "{{ manipulation_commands }}"
  when: manipulation_commands != ""

- name: Out file when manipulate StackSet is empty
  shell: "cat {{ tmp_path }}/ss.json > {{ tmp_path }}/ss-out.json"
  when: manipulation_commands == ""

- name: Upload StackSet Template to S3
  aws_s3:
    bucket: "{{ deploy_bucket }}"
    object: "{{ tmp_path }}/ss.json"
    src: "{{ tmp_path }}/ss-out.json"
    mode: put
    
- name: Create StackSet Stack
  cloudformation_stack_set :
    name: "{{ StackName }}"
    state: "present"
    regions: "{{ Regions }}"
    template_url: "https://s3.amazonaws.com/{{ deploy_bucket }}{{ tmp_path }}/ss.json"
    template_parameters: "{{ cf_template_parameters }}"
    tags:
      AOB: "Deployed"
  register: cf

# - name: Get all stack output info
#   cloudformation_facts:
#     region: "{{ aws_region }}"
#     stack_name: "{{ stack_set_id }}"
#     all_facts: true
#   register: cf_facts

# - name: Register Output to ansible fact
#   set_fact:
#     cf_output: "{{ cf_facts.ansible_facts.cloudformation[stack_set_id].stack_resources }}"